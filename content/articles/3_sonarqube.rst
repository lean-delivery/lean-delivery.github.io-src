Как встроить SonarQube в CI процесс.
##############################################
:date: 2019-11-26 17:56
:author: Dzmitry Rudnouski

SonarQube - это инструмент для статического анализа кода. Общее
представление о нем можно получить из вот этой `краткой статьи <https://en.wikipedia.org/wiki/SonarQube>`_ в
английской википедии. В дополнение к статье подробнее расскажу про
версии и плагины.

Как отдельное приложение SonarQube доступен в виде бесплатной community
версии и трех платных
`версий <https://www.sonarsource.com/plans-and-pricing/>`_ - developer,
enterprise и data center. Кроме этого в наличии платный облачный
вариант - `sonarcloud.io <https://sonarcloud.io/>`_, который, тем не менее, бесплатен для публичных
проектов. Так что, если вы являетесь владельцем open source проекта на
GitHub, Bitbucket или Azure DevOps, рекомендую воспользоваться этой
возможностью (и могу опубликовать краткую инструкцию по настройке).
Кстати, вот вам живой пример: код сайта, который вы сейчас читаете,
проверяется в sonarcloud.io - `lean-delivery.github.io-src <https://sonarcloud.io/dashboard?id=lean-delivery_lean-delivery.github.io-src>`_.

Из коробки SonarQube предоставляет около 20 своих (коробочных) плагинов,
в основном языковых, количество меняется от версии к версии. Кроме этого
доступно около 60 сторонних плагинов различных типов:

-  языковые - например groovy, yaml
-  внешние анализаторы - checkstyle, findbugs, pmd, ansible lint, ...
-  интеграция - например аутентификация через Gitlab, Bitbucket
-  покрытие кода
-  локализация и другие

Стоит сказать, что бесплатная community версия отличается по
возможностям от бесплатной sonarcloud.io. Вот их сравнение:

.. image:: {filename}/images/sonarqube_table1.png

Дальше в этой статье мы будем говорить о бесплатной community версии.
Актульные версии на данный момент – 7.9.1 LTS и 8.0.

**Установка.**

Установить SonarQube можно несколькими способами.

1. Вручную. Просто не советую тратить на это время.

2. Взять официальный `образ <https://hub.docker.com/_/sonarqube>`_ с
   dockerhub. Сам я этот способ не использую, но если интересно, могу
   сравнить с третьим способом.

3. Установить с помощью нашей `ansible-sonarqube <https://github.com/lean-delivery/ansible-role-sonarqube>`_ роли.

Расскажу подробнее про третий способ. Прочтите readme, возьмите оттуда
пример плейбуки и подправьте ее под свои нужды. Она установит SonarQube
и то, что ему требуется для работы: java (опять же используя нашу
`ansible-java <https://github.com/lean-delivery/ansible-role-java>`_ роль), postgresql базу и nginx (для https).

Для установки потребуется машина минимум с 4 Gb памяти – например,
t3a.medium в AWS.

Обратите внимание, что кроме установки, роль может выполнить некоторые
конфигурационные действия:

-  смигрировать базу – потребуется, если у вас уже есть SonarQube, а вы
   устанавливаете более свежую версию поверх
-  добавить вебхук на Jenkins (об этом ниже)
-  импортировать кастомные профили с правилами (об этом тоже ниже)
-  настроить аутентификацию через LDAP

**Конфигурирование.**

Первое, что надо сделать – сменить дефолтный пароль для admin
пользователя в **Administration > Security > Users**. А вот что бывает,
когда об этом забываешь - `UK cell giant EE left a critical code system
exposed with a default
password. <https://www.zdnet.com/article/mobile-giant-left-code-system-online-default-password/>`_
Кстати, мы планируем добавить возможность смены дефолтного пароля в нашу
роль.

Кроме смены пароля добавьте токен admin пользователю, он понадобится в
дальнейшем.

Постороннее лицо уже не может зайти под дефолтными admin/admin, но оно
все еще способно видеть код, который вы анализируете, не заходя в
систему. Поэтому следующий шаг – закрытие гостевого доступа:
**Administration > Configuration > Security > Force user
authentication.** Эта возможность тоже будет добавлена в роль.

Если в ваш SonarQube кроме вас будут ходить и другие люди, имеет смысл
настроить аутентификацию через LDAP (есть в роли), GitHub, Bitbucket,
Gitlab и т.д.

Переходим к настройке языковых профилей в меню **Quality Profiles**.
Если у вас есть свои кастомные профили – вы можете их импортировать еще
на этапе инсталляции с помощью роли и затем вручную назначить их
используемыми по умолчанию. Если кастомных профилей нет – отставляейте
все как есть, по умолчанию будут использоваться Built-in профили. Скорее
всего в дальнейшем вам все равно понадобится создать свои кастомные
профили из Built-in профилей, когда вы захотите убрать/добавить правила
или изменить настройки правил – об этом чуть подробнее смотрите в
разделе ...

Отдельно нужно рассказать про Java профили. Дело в том, что для Java
существует 4 актуальных плагина:

-  коробочный sonar-java-plugin с профилем Sonar way, который
   используется по умолчанию
-  сторонний sonar-findbugs-plugin с 4-мя профилями
-  сторонний sonar-checkstyle-plugin без профилей
-  сторонний sonar-pmd-plugin без профилей

Таким образом, если вы установите все 4 плагина и оставите настройки
профилей без изменений – у вас для проверки java кода будет
использоваться только Sonar way профиль, т.е. будет работать только
коробочный плагин, а 3 сторонних плагина будут бездействовать. Чтобы
задейстовать для проверки все 4 плагина, я создаю кастомный профиль,
который включает в себя правила из всех этих плагинов. Есть планы по
